


$screen-tablet:              768px !default;  
$screen-tablet-min:          $screen-tablet !default;

$screen-desktop:             1025px !default;

$screen-desktop-min:         $screen-desktop !default;

$screen-desktop:             $screen-desktop-min !default;

$screen-mobile-max:          ($screen-tablet-min - 1) !default;

$screen-tablet-max:          ($screen-desktop-min - 1) !default;

$grid-columns:                12 !default;

$grid-gutter-width:           30px !default;

$grid-float-breakpoint:       $screen-tablet-min !default;

$grid-float-breakpoint-max:   ($grid-float-breakpoint - 1) !default;


$container-tablet:             ((680px + $grid-gutter-width)) !default;

$container-sm:                 $container-tablet !default;


$container-desktop:            ((960px + $grid-gutter-width)) !default;

$container-md:                 $container-desktop !default;


$container-large-desktop:      ((1140px + $grid-gutter-width)) !default;

$container-lg:                 $container-large-desktop !default;


@mixin make-grid-columns() {
  $list: '';
  $i: 1;
  $list: ".mobile-#{$i},.tablet-#{$i}, .desktop-#{$i}";
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list},.mobile-#{$i},.tablet-#{$i}, .desktop-#{$i}";
  }
  #{$list} {
    position: relative; 
    min-height: 1px;
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}


@mixin float-grid-columns($class) {
  $list: '';
  $i: 1;
  $list: ".#{$class}-#{$i}";
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  } 
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  // @include loop-grid-columns($grid-columns, $class, pull);
  // @include loop-grid-columns($grid-columns, $class, push);
  // @include loop-grid-columns($grid-columns, $class, offset);
}



@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  // @include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  // @include clearfix();
}


@mixin make-mobile-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (max-width: $screen-mobile-max) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the small columns
@mixin make-tablet-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-tablet-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}


// Generate the medium columns
@mixin make-desktop-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-desktop-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}



// Generate the large columns
// @mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
//   position: relative;
//   min-height: 1px;
//   padding-left:  ($gutter / 2);
//   padding-right: ($gutter / 2);

//   @media (min-width: $screen-lg-min) {
//     float: left;
//     width: percentage(($columns / $grid-columns));
//   }
// }


.container {
  @include container-fixed();

  @media (min-width: $screen-tablet-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-desktop-min) {
    width: $container-md;
  }
}


.container-fluid {
  @include container-fixed();
}



.row {
  @include make-row();
}



@include make-grid-columns();


@media (max-width: $screen-mobile-max ){
  @include make-grid(mobile);
}

@media (min-width: $screen-tablet-min) {
  @include make-grid(tablet);
}



@media (min-width: $screen-desktop-min) {
  @include make-grid(desktop);
}



// @media (min-width: $screen-lg-min) {
//   @include make-grid(lg);
// }


.layout-main {
  @include container-fixed();
  @media (min-width: $screen-tablet-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-desktop-min) {
    width: $container-md;
  }
}
.footer,.footer-top,.header {
  .layout-container {
    @include container-fixed();
    @media (min-width: $screen-tablet-min) {
      width: $container-sm;
    }
    @media (min-width: $screen-desktop-min) {
      width: $container-md;
    }
  }
}


 // @if ($type == push) and ($index > 0) {
  //   .col-#{$class}-push-#{$index} {
  //     left: percentage(($index / $grid-columns));
  //   }
  // }
  // @if ($type == push) and ($index == 0) {
  //   .col-#{$class}-push-0 {
  //     left: auto;
  //   }
  // }
  // @if ($type == pull) and ($index > 0) {
  //   .col-#{$class}-pull-#{$index} {
  //     right: percentage(($index / $grid-columns));
  //   }
  // }
  // @if ($type == pull) and ($index == 0) {
  //   .col-#{$class}-pull-0 {
  //     right: auto;
  //   }
  // }
  // @if ($type == offset) {
  //   .col-#{$class}-offset-#{$index} {
  //     margin-left: percentage(($index / $grid-columns));
  //   }
  // }

// @mixin make-sm-column-offset($columns) {
//   @media (min-width: $screen-tablet-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-push($columns) {
//   @media (min-width: $screen-tablet-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-sm-column-pull($columns) {
//   @media (min-width: $screen-tablet-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

// Generate the extra small columns

// @mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
//   position: relative;
//   float: left;
//   width: percentage(($columns / $grid-columns));
//   min-height: 1px;
//   padding-left:  ($gutter / 2);
//   padding-right: ($gutter / 2);
// }



// @mixin make-xs-column-offset($columns) {
//   margin-left: percentage(($columns / $grid-columns));
// }
// @mixin make-xs-column-push($columns) {
//   left: percentage(($columns / $grid-columns));
// }
// @mixin make-xs-column-pull($columns) {
//   right: percentage(($columns / $grid-columns));
// }

// @mixin make-md-column-offset($columns) {
//   @media (min-width: $screen-desktop-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-md-column-push($columns) {
//   @media (min-width: $screen-desktop-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-md-column-pull($columns) {
//   @media (min-width: $screen-desktop-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

// @mixin make-lg-column-offset($columns) {
//   @media (min-width: $screen-lg-min) {
//     margin-left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-lg-column-push($columns) {
//   @media (min-width: $screen-lg-min) {
//     left: percentage(($columns / $grid-columns));
//   }
// }
// @mixin make-lg-column-pull($columns) {
//   @media (min-width: $screen-lg-min) {
//     right: percentage(($columns / $grid-columns));
//   }
// }

//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

// Extra small screen / phone
//** Deprecated `$screen-xs` as of v3.0.1

// $screen-xs:                  480px !default;

//** Deprecated `$screen-xs-min` as of v3.2.0

// $screen-xs-min:              $screen-xs !default;

//** Deprecated `$screen-phone` as of v3.0.1


// $screen-phone:               $screen-xs-min !default;

// Small screen / tablet
//** Deprecated `$screen-sm` as of v3.0.1